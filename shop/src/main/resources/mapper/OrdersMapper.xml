<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nju.book.shop.mapper.OrdersMapper">
  <resultMap id="BaseResultMap" type="com.nju.book.shop.model.Orders">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="code" jdbcType="VARCHAR" property="code" />
    <result column="user_id" jdbcType="INTEGER" property="userId" />
    <result column="rec_name" jdbcType="VARCHAR" property="recName" />
    <result column="address" jdbcType="VARCHAR" property="address" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="order_sum" jdbcType="DOUBLE" property="orderSum" />
    <result column="shipdate" jdbcType="TIMESTAMP" property="shipdate" />
    <result column="orderdate" jdbcType="TIMESTAMP" property="orderdate" />
  </resultMap>
  <resultMap id="collectionMap" type="com.nju.book.shop.model.Orders" extends="BaseResultMap">
    <!-- 一对多关联 -->
    <!-- property: 配置多的在类中的属性名(这里就是Orders类中存放订单明细List对象名)
         ofType: property的List中存放的数据类型(类名)
    -->
    <collection property="orderItems" ofType="com.nju.book.shop.model.OrderItems">
      <id column="oid" jdbcType="INTEGER" property="id" />
      <result column="order_id" jdbcType="INTEGER" property="orderId" />
      <result column="book_id" jdbcType="INTEGER" property="bookId" />
      <result column="price" jdbcType="REAL" property="price" />
      <result column="num" jdbcType="INTEGER" property="num" />
      <!-- 一对一关联 -->
      <!--
     javaType: 需要封装的类名
     property:需要封装的类的对象名
     column: 两张表的关联字段名
-->
     <!-- <association property="book" column="book_id" javaType="com.nju.book.model.Book">
        <id column="bid" jdbcType="INTEGER" property="id" />
        <result column="bname" jdbcType="VARCHAR" property="bname" />
        <result column="cur_price" jdbcType="REAL" property="curPrice" />
        <result column="picture" jdbcType="VARCHAR" property="picture" />
      </association>-->
    </collection>
  </resultMap>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from orders
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <!--
          自动生的主键,并且主键对应的Orders类的属性是ID,
          这样这条记录插入以后就会把主键回写到order对象的id属性中
          useGeneratedKeys="true"
          keyProperty="id"
  -->
  <insert id="insert" parameterType="com.nju.book.shop.model.Orders"
          useGeneratedKeys="true"
          keyProperty="id"
  >
    insert into orders (id, code, user_id, 
      rec_name, address, phone, 
      status, order_sum, shipdate, 
      orderdate)
    values (#{id,jdbcType=INTEGER}, #{code,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}, 
      #{recName,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, 
      #{status,jdbcType=CHAR}, #{orderSum,jdbcType=DOUBLE}, #{shipdate,jdbcType=TIMESTAMP}, 
      #{orderdate,jdbcType=TIMESTAMP})
  </insert>
  <update id="updateByPrimaryKey" parameterType="com.nju.book.shop.model.Orders">
    update orders
    set code = #{code,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER},
      rec_name = #{recName,jdbcType=VARCHAR},
      address = #{address,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      status = #{status,jdbcType=CHAR},
      order_sum = #{orderSum,jdbcType=DOUBLE},
      shipdate = #{shipdate,jdbcType=TIMESTAMP},
      orderdate = #{orderdate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select id, code, user_id, rec_name, address, phone, status, order_sum, shipdate, 
    orderdate
    from orders
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectAll" resultMap="BaseResultMap">
    select id, code, user_id, rec_name, address, phone, status, order_sum, shipdate, 
    orderdate
    from orders
  </select>
  <select id="selectConnAll"  parameterType="Integer" resultMap="collectionMap">
      select o.id, o.code, o.user_id, o.rec_name, o.address, o.phone, o.status, o.order_sum, o.shipdate,
      o.orderdate,oi.id oid,oi.order_id,oi.book_id,oi.price,oi.num
      from orders o
      inner join orderitems oi on o.id=oi.order_id
      where  o.user_id=#{userId}
      order by o.orderdate desc
  </select>

  <select id="queryAll" parameterType="Integer" resultMap="BaseResultMap">
    select id, code, user_id, rec_name, address, phone, status, order_sum, shipdate,
    orderdate
    from orders
    where user_id=#{userId}
    order by orderdate desc
  </select>
  <select id="sumByMonth" parameterType="com.nju.book.shop.vo.OrdersSumVO"  resultType="com.nju.book.shop.vo.OrdersSumVO">
    select month(orderdate) month,sum(order_sum) total from orders
    where user_id=#{userId} and year(orderdate)=#{year}
    group by month(orderdate)
  </select>


</mapper>